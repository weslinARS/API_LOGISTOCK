generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Char(36)

  firstName String @map("first_name") @db.VarChar(255)
  lastName  String @map("last_name") @db.VarChar(255)

  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  role UserRole @default(seller)

  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime              @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted           Boolean               @default(false) @map("is_deleted")
  PurchaseOrder       PurchaseOrder[]
  StockMovement       StockMovement[]
  ProductPriceHistory ProductPriceHistory[]

  @@map("users")
}

// modelo para representar los almacenes
model WareHouse {
  id String @id @default(uuid()) @db.Char(36)

  name     String @unique @db.VarChar(255)
  location String @db.VarChar(255)

  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted      Boolean          @default(false) @map("is_deleted")
  InventoryLevel InventoryLevel[]

  fromStockMovement StockMovement[] @relation("FromStockMovement")
  toStockMovement   StockMovement[] @relation("ToStockMovement")

  @@map("warehouses")
}

// modelo para representar los proveedores
model Supplier {
  id String @id @default(uuid()) @db.Char(36)

  name    String @unique @db.VarChar(100)
  email   String @unique @db.VarChar(255)
  phone   String @db.VarChar(50)
  address String @db.VarChar(255)

  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted     Boolean         @default(false) @map("is_deleted")
  Product       Product[]
  PurchaseOrder PurchaseOrder[]

  @@map("suppliers")
}

// modelo para representar las categorías de productos
model ProductCategory {
  id String @id @default(uuid()) @db.Char(36)

  name      String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted Boolean   @default(false) @map("is_deleted")
  Product   Product[]

  @@map("product_categories")
}

// modelo para representar los productos
model Product {
  id             String @id @default(uuid()) @db.Char(36)
  categoryId     String @map("category_id") @db.Char(36)
  supplierId     String @map("supplier_id") @db.Char(36)
  productBrandId String @map("product_brand_id") @db.Char(36)

  productBrand ProductBrand    @relation(fields: [productBrandId], references: [id])
  category     ProductCategory @relation(fields: [categoryId], references: [id])
  supplier     Supplier        @relation(fields: [supplierId], references: [id])

  name        String  @unique @db.VarChar(200)
  sku         String  @unique @db.VarChar(100)
  description String? @db.Text

  entryPrice Float @map("entry_price") @db.Float
  unitPrice  Float @map("unit_price") @db.Float

  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime              @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted           Boolean               @default(false) @map("is_deleted")
  InventoryLevel      InventoryLevel[]
  PurchaseOrderItem   PurchaseOrderItem[]
  StockMovement       StockMovement[]
  ProductPriceHistory ProductPriceHistory[]

  @@map("products")
}

model ProductBrand {
  id        String    @id @default(uuid()) @db.Char(36)
  name      String    @db.VarChar(100)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  Product   Product[]

  @@map("product_brands")
}

// modelo para representar los niveles de inventario de los productos en cada almacén
model InventoryLevel {
  id          String    @id @default(uuid()) @db.Char(36)
  productId   String    @map("product_id") @db.Char(36)
  warehouseId String    @map("warehouse_id") @db.Char(36)
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   WareHouse @relation(fields: [warehouseId], references: [id])

  quantity Int @db.Int
  minStock Int @map("min_stock") @db.Int

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("inventory_levels")
}

// modelo para representar las órdenes de compra
model PurchaseOrder {
  id         String @id @default(uuid()) @db.Char(36)
  supplierId String @map("supplier_id") @db.Char(36)
  userId     String @map("user_id") @db.Char(36)

  supplier Supplier @relation(fields: [supplierId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  orderDate   DateTime            @map("order_date") @db.Timestamp(6)
  status      PurchaseOrderStatus @default(pending)
  totalAmount Float               @map("total_amount") @db.Float

  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted         Boolean             @default(false) @map("is_deleted")
  PurchaseOrderItem PurchaseOrderItem[]

  @@map("purchase_orders")
}

enum PurchaseOrderStatus {
  pending
  approved
  cancelled
  completed
}

// modelo para representar los ítems de las órdenes de compra
model PurchaseOrderItem {
  id              String @id @default(uuid()) @db.Char(36)
  purchaseOrderId String @map("purchase_order_id") @db.Char(36)
  productId       String @map("product_id") @db.Char(36)

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])

  quantity  Int   @db.Int
  unitPrice Float @map("unit_price") @db.Float
  subtotal  Float @db.Float

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  isDeleted Boolean  @default(false) @map("is_deleted")

  @@map("purchase_order_items")
}

// modelo para representar las órdenes de venta
model StockMovement {
  id              String  @id @default(uuid()) @db.Char(36)
  fromWarehouseId String? @map("from_warehouse_id") @db.Char(36)
  toWarehouseId   String? @map("to_warehouse_id") @db.Char(36)
  userId          String  @map("user_id") @db.Char(36)
  productId       String  @map("product_id") @db.Char(36)

  user          User       @relation(fields: [userId], references: [id])
  product       Product    @relation(fields: [productId], references: [id])
  fromWarehouse WareHouse? @relation("FromStockMovement", fields: [fromWarehouseId], references: [id])
  toWarehouse   WareHouse? @relation("ToStockMovement", fields: [toWarehouseId], references: [id])

  quantity Int    @db.Int
  reason   String @db.Text

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("stock_movements")
}

// modelo para representar los ítems de las órdenes de venta
model ProductPriceHistory {
  id        String @id @default(uuid()) @db.Char(36)
  productId String @map("product_id") @db.Char(36)
  userId    String @map("user_id") @db.Char(36)

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  previousPrice Float @map("previous_price") @db.Float
  newPrice      Float @map("new_price") @db.Float

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("product_price_history")
}

enum UserRole {
  admin
  manager
  seller
}
